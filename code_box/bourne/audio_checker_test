#!/bin/bash
#set -x

### fehlen noch command line switches um die Nachfragrerei zu unterbinden bzw zu ermöglichen
### !!! id3info statt exiftool verwenden !!!
IFS='
'

rot='\033[1;31m'
grn='\033[0;32m'
blu='\033[1;34m'
off='\033[0m'

top_music_dir="$1"

get_artist () {
  TPE=$(id3info "$1" | sed -n 's;^=.*TPE*1.*: ;;p')
  if [[ -z "$TPE" ]]; then
    TPE=$(exiftool -s3 -artist "$1")
  fi
  echo "$TPE"
}

get_album () {
  TAL=$(id3info "$1" | sed -n 's;^=.*TALB*.*): ;;p')
  if [[ -z "$TAL" ]]; then
    TAL=$(exiftool -s3 -album "$1")
  fi
  echo "$TAL"
}

lowercase () {
  tr '[:upper:]' '[:lower:]'
}

test_empty_dir () {							    #### statt ls koennte du -s hier besser sein (4 bytes = leeres dir)
  if [[ -z "$(ls -A $1)" ]]; then
    read -n 1 -p "this one's empty and will be removed, do you like that?" ny
    case "$yn" in
      [Yy]) set -x; rm -r "$1"; set +x ;;
      [Nn]) continue ;;
    esac
  fi
}

test_for_audio () {
  #### besser: until schleife first audio file 
  if [[ -z $(file -b "$1"/* | grep -i "audio") ]]; then
    echo "in diesem verzeichnis sind keine audiodateien, vielleicht bilddateien?"
    if [[ $(dirname "$1") =~ "_noaudio" ]]; then
      echo "eh schon im noaudio-verzeichnis"
      continue
    else
      read -n 1 -p "verschieben nach ${top_music_dir}_noaudio/$(basename ${1})? [y/n]" yn
      case "$yn" in
	[Yy] ) 
	  set -x
	  if [[ -d "${top_music_dir}_noaudio" ]]; then 
	    cp -R "$1" "${top_music_dir}_noaudio" && rm -r "$1"
	  else
	    mkdir "${top_music_dir}_noaudio" && cp -R "$1" "${top_music_dir}_noaudio" && rm -r "$1"
	  fi
	  set +x ;;
	[Nn] ) continue ;;
      esac

      continue
    fi
  fi
}

gettagsfromfile () {
  echo -e "${blu}$1 is a regular file which does not conern us right now...${off}"
  extn=${1##*.}
  band=$(exiftool -s3 -Artist $1 | lowercase)
  albu=$(exiftool -s3 -Album $1 | lowercase)
  song=$(exiftool -s3 -Title $1 | lowercase)
  trac=$(exiftool -s3 -Track $1 | lowercase)
  trnm=$(printf "%02d" $((10#${trac%%/*})) )
  echo "$band - $albu - $trnm - $song"
  echo "Dateiendung = $extn"
}

dir_analysis () {
  if [[ -f "$1" ]]; then									    # wenn $1 ein normales file ist
    gettagsfromfile "$1"

  elif [[ -d "$1" ]]; then									    # wenn $1 ein verzeichnis ist
    test_empty_dir "$1"										    # wenn komplett leer: löschen
    test_for_audio "$1"										    # wenn keine audiodateien drin: siehe funktion
    unset band											    # evtl. vom letzten Durchlauf vorhandene
    unset albu											    # Werte in den Arrays löschen

    # check each file for whether it's an audio file and if so, read artist and album tags and put them in an array band[] and albu[]
    echo -e "${grn}$1${off} is a directory - trying to find out, which album..."
    for i in $(find $1 -mindepth 1 -maxdepth 1 -type f); do   # should iterate over leaf directories. yet to implement the search for leaf directories
      if [[ -n $(file -b "$i" | grep -i ^audio) ]]; then
	if [[ -n $(get_artist "$i") ]]; then
	  band+=($(get_artist "$i" | sed 's;[^[:alnum:][:space:]()-];;g' | lowercase))    # band/artistname ins array schieben und vorher unsichere zeichen ersetzen
	else
	  band+=(unbekannt)									    # or fill array with unbekannt
	fi

	if [[ -n $(get_album "$i") ]]; then						    # add Albumname to array if there is one
	  albu+=($(get_album "$i" | sed 's;[^[:alnum:][:space:]()-];;g' | lowercase))
	else
	  albu+=("unbekanntes Album")								    # or fill array with unbekannt
	fi
      fi
      echo -ne "."
    done
    echo -ne "arrays für album und artist befüllt\n"


    #### Auswertung, ob Artist eindeutig ist
    for bandresult in $(echo "${band[*]}" | sort | uniq -c | sed 's!^\s\+!!' | head -n1); do	    # anzahl der gleichen Artistnames im Array wird in der Form "[Anzahl] [Name]" ausgegeben, es interessiert aber nur das oberste (=größte Zahl gleicher Namen)
      # echo "$bandresult"
      bcount=$( echo $bandresult | sed 's/\(^[0-9]\+\)\s.*$/\1/' )			    # $bcount ist die Zahl der identischen Ergebnisse (Form zb 6 Künstler)
      bandname=$( echo $bandresult | sed 's;^[[:digit:]]\+[[:blank:]]\+;;' )		    # $bandname ist der Name ohne die Zahl	      (Form zb 6 Künstler)
      # echo "$bcount"
      bperc=$(echo "scale=4;($bcount/${#band[*]})*100.0" | bc -l | cut -d '.' -f1)	    # $perc = Prozent, die ein Ergebnis ausmacht
      # echo "$bcount/${#band[*]}=$bperc Prozent der Files sind von $bandname"
      if [[ "$bperc" -ge 60 ]]; then
	echo -ne "$bandname ($bperc%) - "
	break
      else
	echo -ne "$bandname ($bperc%) - "
	echo "keine eindeutige zuordnung möglich"
	bandname="unknown_artist"
      fi
    done
    #### Auswertung, ob Album eindeutig ist
    for alburesult in $(echo "${albu[*]}" | sort | uniq -c | sed 's!^\s\+!!'); do	    # für jede unterschiedliche Zeile der erhaltenen band-Ergebnisse wird gezählt, wie oft der Bandname vorkommt
      acount=$( echo $alburesult | sed 's/\(^[0-9]\+\)\s.*$/\1/' )			    # $count ist die reine Anzahl der identischen Ergebnisse
      albuname=$( echo $alburesult | sed 's;^[[:digit:]]\+[[:blank:]]\+;;' )
      aperc=$(echo "scale=4;($acount/${#albu[*]})*100.0" | bc -l | cut -d '.' -f1)	    # $perc = Prozent, die ein Ergebnis ausmacht
      if [[ "$aperc" -ge 60 ]]; then
	echo "$albuname ($aperc%)"
	break
      else
	echo "$albuname ($aperc%)"
	echo "keine eindeutige zuordnung möglich"
	albuname="unknown_album"
      fi
    done


    #### wenn eins von beidem  unbekannt ist, nichts tun
    if [[ "$albuname" == "unknown_album" ]] || [[ "$bandname" == "unknown_artist" ]]; then
      echo -e "dieses verzeichnis konnte nicht eindeutig identifiziert werden, wird gelassen, wie es ist\n hier sollten optionen zur auswahl hin"
    elif [[ -d "$top_music_dir$bandname - $albuname" ]] && [[ $(dirname "$1")/? =~ "$top_music_dir" ]]; then
      echo "this is already under top level and correctly named... skipping"
    else
      while [[ -d "$top_music_dir$bandname - $albuname" ]] && [[ ! $(dirname "$1")/? =~ "$top_music_dir" ]]; do
	albuname="$albuname"_1
      done
      echo "$1 to $top_music_dir$bandname - $albuname"
      echo -e "$1 wird umbenannt und verschoben nach ${grn}\"$top_music_dir$bandname - $albuname\"${off}\n\n"
      read -n 1 -p "do you like that [y/n]?" yn
      case "$yn" in
	[Yy] ) set -x; cp -R   "$1"  "$top_music_dir$bandname - $albuname" && rm -r "$1"; set +x;;
	[Nn] ) continue ;;
      esac
    fi

  else
    echo "$1 ist weder ein vorhandenes Verzeichnis noch eine Datei? exiting..."    # wenn $1 weder ein file noch ein directory ist; dieser check sollte an den Anfang, nicht ans Ende
    exit
  fi
}

## gucken, ob's im Ordner weitere Unterordner gibt
checksb () {
  find $1 -mindepth 1 -maxdepth 1 -type d
}

# in Unterverzeichnisse absteigen und gucken, ob's Audiodateien gibt
checksub () {
  if [[ -n "$(checksb $1)" ]]; then		## wenn der Rückgabewert nicht leer ist, sind Unterverzeichnisse vorhanden
    echo "subdir found in $1, descending"
    for i in $(checksb $1); do			## jedes Unterverzeichnis angucken und ggf. weiter absteigen
      echo -e "\n"
      checksub "$i"
    done
  else
    echo "$i is a leaf node"			## wenn keine Unterverzeichnisse da sind, ist es ein Leaf
    dir_analysis "$i"
  fi
}



##### MAIN
checksub $top_music_dir

