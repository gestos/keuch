#!/bin/bash
### fehlen noch command line switches um die Nachfragrerei zu unterbinden bzw zu ermöglichen
#set -x
IFS='
'

path1=$( realpath "${1}" )
top_music_dir="${path1}/"

## colors
rot='\033[1;31m'
grn='\033[0;32m'
blu='\033[1;34m'
off='\033[0m'
iton=$( tput bold   || tput ZH ) # Start italic
itof=$( tput sgr0   || tput ZR ) # End   italic
## sanitize filenames for final renaming
## mit 'file' lässt sich die codierung feststellen. dann nach utf8
sanitize () {
  sed 's;[^[:alnum:][:space:]&_()-];;g' | sed 's;[[:space:]]*$;;'
}
lowercase () {
  sed -e 's/./\L\0/g'
}
charconv1 () {
  iconv -f "$TPE1_enc" -t utf-8
}
charconv2 () {
  iconv -f "$TPE2_enc" -t utf-8
}
charconv () {
  iconv -f "$TPE_enc" -t utf-8
}
charconva () {
  iconv -f "$TAL_enc" -t utf-8
}
## extract tag information of individual files
get_artist () {
  # set -x
  unset TP TP1 TP2 TA
  TPEX=($(id3info "$1" | grep TP))

  TPE1=$( sed -n 's;^=.*TPE*1.*: ;;p' <<< "${TPEX[*]}" | sanitize )
  if [[ -n "$TPE1" ]]; then
    TPE1_enc=$( echo "$TPE1" | file -i - | sed 's;^.*charset=\(.*\);\1;g' )
    TP1=$( echo "$TPE1" | iconv -f "$TPE1_enc" -t utf-8 | lowercase )
  fi

  TPE2=$( sed -n 's;^=.*TPE*2.*: ;;p' <<< "${TPEX[*]}" | sanitize )
  if [[ -n "$TPE2" ]]; then
    TPE2_enc=$( echo "$TPE2" | file -i - | sed 's;^.*charset=\(.*\);\1;g' )
    TP2=$( echo "$TPE2" | charconv2 | lowercase )
  fi
  if [[ -z "$TP1" ]] && [[ -z "$TP2" ]]; then
    TPE=$( exiftool -m -q -q -s3 -artist "$1" | sanitize )
    if [[ -n "$TPE" ]]; then
      TPE_enc=$( echo "$TPE" | file -i - | sed 's;^.*charset=\(.*\);\1;g' )
      TP=$( echo "$TPE" | charconv | lowercase )
    fi
    if [[ -n "$TP" ]];  then
      band+=("$TP")
    fi
  else
    if [[ -n "$TP1" ]]; then
      band1+=("$TP1")
    fi
    if [[ -n "$TP2" ]]; then
      band2+=("$TP2")
    fi
  fi
}

get_album () {
  TAL=$( id3info "$1" | sed -n 's;^=.*TALB*.*): ;;p' | sanitize )
  if [[ -n "$TAL" ]]; then
    TAL_enc=$( echo "$TAL" | file -i - | sed 's;^.*charset=\(.*\);\1;g' )
    TA=$( echo "$TAL" | charconva | lowercase )
  fi

  if [[ -z "$TAL" ]]; then
    TAL=$( exiftool -m -q -q -s3 -album "$1" | sanitize )
    if [[ -n "$TAL" ]]; then
      TAL_enc=$( echo "$TAL" | file -i - | sed 's;^.*charset=\(.*\);\1;g' )
      TA=$( echo "$TAL" | charconva | lowercase )
    fi
  fi

  if [[ -n "$TA" ]]; then
    albu+=("$TA")
  fi
  echo -ne "."
}

## test for empty directories; possibly better with 'du -s'?
test_empty_dir () {
  if [[ -z "$(ls -A $1)" ]]; then
    read -n 1 -p "this one's empty and will be removed, do you like that? [y/n]" ny
    case "$ny" in
      [Yy]) set -x; rm -r "$1"; set +x; continue ;;
      *) continue;;
    esac
  fi
}

## test whether directory contains any audio files
## hier gehört noch ein test rein, ob das dir nur 2 level tief liegt; bei tiefer anbieten, den content einfach ins mutterverzeichnis zu schieben
test_for_audio () {
  if [[ -z $(file -b "${1}/"* | grep -i "audio\|mpeg.*iii\|4.*khz") ]]; then
    echo -e " there are no audio files in this directory. maybe images or playlists?"
    if [[ $(dirname "$1") =~ "_noaudio" ]]; then						  # skip, if already under the _noaudio directory
      echo -e "already under _noaudio, ${blu}skipping...${off}"
      continue
    else
      read -n 1 -p "move to ${top_music_dir}_noaudio/$(basename ${1})? [y/n]" yn
      case "$yn" in
	[Yy] )
	  set -x
	  if [[ -d "${top_music_dir}_noaudio" ]]; then
	    cp -R "$1" "${top_music_dir}_noaudio" && rm -r "$1"
	  else
	    mkdir "${top_music_dir}_noaudio" && cp -R "$1" "${top_music_dir}_noaudio" && rm -r "$1"
	  fi
	  set +x
	  continue ;;
	* ) continue ;;
      esac
    fi
  fi
}

gettagsfromfile () {
  echo -e "${blu}$1 is a regular file which does not conern us right now...${off}"
  extn=${1##*.}
  band=$(exiftool -s3 -Artist $1 | lowercase)
  albu=$(exiftool -s3 -Album $1 | lowercase)
  song=$(exiftool -s3 -Title $1 | lowercase)
  trac=$(exiftool -s3 -Track $1 | lowercase)
  trnm=$(printf "%02d" $((10#${trac%%/*})) )
  echo "$band - $albu - $trnm - $song"
  echo "Dateiendung = $extn"
}

dir_analysis () {
  unset bandlist1_allresult bandlist2_allresult bandlist_allresult bandlist_topresult bandlist1_topresult bandlist2_topresult
  unset mosthits_number mosthits_value mosthits1_number mosthits1_value mosthits2_number mosthits2_value bperc bperc1 bperc2
  unset band band1 band2 bandall albu bandlist_topresults	# reset array

  if [[ -f "$1" ]]; then		# if $1 is a regular file, get tracknumber and stuff
    gettagsfromfile "$1"

  elif [[ -d "$1" ]]; then		# if $1 is a regular directory...
    test_empty_dir "$1"			# ... check, whether empty
    test_for_audio "$1"			# ... check, whether there's audio files
    echo -e -n " ...and is a directory - analysing\n..."
    filecount=0
    for i in "${1}/"*; do		# iterate over files; i in $1/* works, we're already in a leaf directory
      if [[ -n $(file -b "$i" | grep -i "audio\|mpeg\|4.*khz") ]]; then	# only audio files
	((filecount+=1))
	get_artist "$i"
	get_album "$i"
      fi
    done
    echo "$filecount audio files in directory"
    echo -ne "all available artist/album tags pushed to arrays, now evaluating...\n"

    #### Auswertung, ob Artist eindeutig ist
    ## für alle arrays zusammen
    bandall=("${band[@]}" "${band1[@]}" "${band2[@]}")
    if [[ -n "${bandall[*]}" ]]; then
      bandlist_allresult=$( echo -e "${bandall[*]}" | sort |  uniq -c | sort -nr | sed 's;^[[:space:]]*;;g' )
      bandlist_topresult=$( echo -e "${bandall[*]}" | sort |  uniq -c | sort -nr | sed 's;^[[:space:]]*;;g' | head -n1 )
      bandlist_topresults=($( echo -e "${bandall[*]}" | sort |  uniq -c | sort -nr | sed 's;^[[:space:]]*;;g' | sed 's;^[[:digit:]]*[[:space:]]*;;' | head -n2 ))
      mosthits_number=$(sed 's;\(^[[:digit:]]*\).*;\1;' <<< "$bandlist_topresult")
      mosthits_value=$(sed 's;^[[:digit:]]*[[:space:]]*;;' <<< "$bandlist_topresult")
      bperc=$(echo "scale=4;($mosthits_number/${#bandall[*]})*100.0" | bc -l | cut -d '.' -f1)	# $bperc = oberster Treffer aller bandarrays zusammen
      ## nur tp1
      if [[ -n "${band1[*]}" ]]; then
	bandlist1_allresult=$( echo "${band1[*]}" | sort |  uniq -c | sort -nr | sed 's;^[[:space:]]*;;g' | grep -v ^$ )
	bandlist1_topresult=$( echo "${band1[*]}" | sort |  uniq -c | sort -nr | sed 's;^[[:space:]]*;;g' | head -n1 )
	mosthits1_number=$(sed 's;\(^[[:digit:]]*\).*;\1;' <<< "$bandlist1_topresult")
	mosthits1_value=$(sed 's;^[[:digit:]]*[[:space:]]*;;' <<< "$bandlist1_topresult")
	bperc1=$(echo "scale=4;($mosthits1_number/${#band1[*]})*100.0" | bc -l | cut -d '.' -f1)
      fi
      ## nur tp2
      if [[ -n "${band2[*]}" ]]; then
	bandlist2_allresult=$( echo "${band2[*]}" | sort |  uniq -c | sort -nr | sed 's;^[[:space:]]*;;g' | grep -v ^$ )
	bandlist2_topresult=$( echo "${band2[*]}" | sort |  uniq -c | sort -nr | sed 's;^[[:space:]]*;;g' | head -n1 )
	mosthits2_number=$(sed 's;\(^[[:digit:]]*\).*;\1;' <<< "$bandlist2_topresult")
	mosthits2_value=$(sed 's;^[[:digit:]]*[[:space:]]*;;' <<< "$bandlist2_topresult")
	bperc2=$(echo "scale=4;($mosthits2_number/${#band2[*]})*100.0" | bc -l | cut -d '.' -f1)
      fi
    fi

    if [[ ${#bandall[@]} -eq 0  ]]; then
      echo -en "artist array is empty; bandname set to unknown_artist\n"
      bandname="unknown_artist"
    elif [[ "$bperc" -ge 60 ]] && [[ -n "$mosthits_value" ]]; then	# wenn das oberste ergebnis nicht leer ist und über 60% der gefundenen Namen ausmacht
      echo -ne "${iton}$mosthits_value${itof} is $bperc% of all retrieved artist names - "
      bandname="$mosthits_value"
    else								# wenn das oberste Ergebnis weniger als 60% ausmacht
      echo -ne "most common of all retrieved artist names is below 60%\n"

      if [[ -n $bandlist1_allresult ]] && [[ $(echo "$bandlist1_allresult" | wc -l) -eq 1 ]]; then	# if tpe1 exists and has only one entry
	bandname="$mosthits1_value"
	echo -en "but tpe1 (${iton}$bandname${itof}) is unambiguous and takes precedence over tpe2 - "
      elif [[ -n $bandlist2_allresult ]] && [[ $(echo "$bandlist2_allresult" | grep -v ^$ | wc -l) -eq 1 ]]; then	# if tpe2 exists; tpe1 takes precedence  because it's the first checked
	bandname="$mosthits2_value"
	echo -en "tpe2 (${iton}$bandname${itof}) is unambiguous while tpe1 isn't - "
      else    # if neither tp1 nor tp2 are unambiguous
	echo -en "neither tp1 nor tp2 are unambiguous \n"
	vorschlag1="${bandlist_topresults[0]}"
	vorschlag2="${bandlist_topresults[1]}"
	echo -e "most frequent results for band are:\n$vorschlag1 [1]\n$vorschlag2 [2]\n choose ${blu}[1]${off} or ${blu}[2]${off} for given results, ${blu}[3]${off} for unknown or ${blu}[4]${off} to skip"
	read -n 1 selectband
	case "$selectband" in
	  1) bandname="$vorschlag1";;
	  2) bandname="$vorschlag2";;
	  3) bandname="unknown_artist" ;;
	  *) continue ;;
	esac
      fi
    fi
    #### Auswertung, ob Album eindeutig ist
    if [[ -n "${albu[@]}" ]]; then
      albulist_topresult=$( echo "${albu[*]}" | sort | uniq -c | sort -nr | sed 's;^[[:space:]]*;;g' | head -n1 )
      mosthits_number=$(sed 's;\(^[[:digit:]]*\).*;\1;' <<< "$albulist_topresult")
      mosthits_value=$(sed 's;^[[:digit:]]*[[:space:]]*;;' <<< "$albulist_topresult")
      aperc=$(echo "scale=4;($mosthits_number/${#albu[*]})*100.0" | bc -l | cut -d '.' -f1)	    # $perc = Prozent, die ein Ergebnis ausmacht
      if [[ "$aperc" -ge 60 ]] && [[ -n "$mosthits_value" ]]; then
	echo -ne "album ${iton}$mosthits_value${itof} seems ok ($aperc%)\n"
	albuname="$mosthits_value"
      else
	echo -ne "$mosthits_value ($aperc%) - "
	echo "keine eindeutige zuordnung möglich"
	albuname="unknown_album"
      fi
    else
      echo "keine eindeutige zuordnung möglich"
      albuname="unknown_album"
    fi

    #### wenn eins von beidem  unbekannt ist, nichts tun
    if [[ "$albuname" == "unknown_album" ]] && [[ "$bandname" == "unknown_artist" ]]; then
      echo -e "${rot}dieses verzeichnis konnte nicht eindeutig identifiziert werden, wird gelassen, wie es ist${off}\n hier sollten optionen zur auswahl hin"
      prob+=("$1")

    elif [[ -d "$top_music_dir$bandname - $albuname" ]] && [[ $(dirname "${1}")/ == "$top_music_dir" ]]; then
      echo -e "this is already under top level and correctly named... ${blu}skipping${off}"

    else
      while [[ -d "$top_music_dir$bandname - $albuname" ]] && [[ ! $(dirname "$1")/ == "$top_music_dir" ]]; do
	albuname="$albuname"_1
      done
      echo -e "${iton}$1${itof} to be renamed and moved to \n${blu}$top_music_dir$bandname - $albuname${off}\n"
      read -n 1 -p "do you like that [y/n]?" yn
      case "$yn" in
	[Yy] ) set -x; cp -R   "$1"  "$top_music_dir$bandname - $albuname" && rm -r "$1"; set +x;;
	[Nn] ) continue ;;
      esac
    fi
  else
    echo "$1 ist weder ein vorhandenes Verzeichnis noch eine Datei? exiting..."    # wenn $1 weder ein file noch ein directory ist; dieser check sollte an den Anfang, nicht ans Ende
    exit
  fi
}

## gucken, ob's im Ordner weitere Unterordner gibt
checksb () {
  find $1 -mindepth 1 -maxdepth 1 -type d
}

# in Unterverzeichnisse absteigen und gucken, ob's Audiodateien gibt
checksub () {
  if [[ -n "$(checksb $1)" ]]; then		## wenn der Rückgabewert nicht leer ist, sind Unterverzeichnisse vorhanden
    echo "subdir found in $1, descending"
    for i in $(checksb $1); do			## jedes Unterverzeichnis angucken und ggf. weiter absteigen
      echo -e "\n"
      checksub "$i"
    done
  else
    echo -n -e "${grn}$i${off} is a leaf node"			## wenn keine Unterverzeichnisse da sind, ist es ein Leaf
    dir_analysis "$i"
  fi
}



##### MAIN
unset $prob
checksub "$top_music_dir"
#dir_analysis "$top_music_dir"
echo -e "audio dirs that were problematic:"
echo -e "${rot}${prob[*]}${off}"
